#!/usr/bin/env python3
import sys
import os
import cryptocode
import random
import string
import getpass
from enum import Enum
from prettytable import PrettyTable

help_msg = '''
  pswm <alias> <username> <password>  - Store a username and a password.
  pswm <alias> <username> -g [length] - Generate a random password and store it.
  pswm <alias> -d                     - Delete user and password for an alias.
  pswm <alias>                        - Print user and password for an alias.
  pswm -a                             - Print all stored users and passwords.
'''
min_length = 4
default_length = 16
max_length = 32

pass_vault_file = os.path.expanduser("~") + "/.pswm"


# Function to print the password vault using prettytable.
# args:
#  pass_vault: A dictionary aliases associated to usernames and passwords.
#  alias: The alias to print. If None, all aliases are printed. 
def print_pass_vault(pass_vault, alias=None):

    table = PrettyTable()

    if alias != None:
        if alias in pass_vault:
            row = []
            row.append(alias)
            row.extend(pass_vault[alias])
            table.add_row(row)
        else:
            print("No password for " + alias + " was found.")

    else:
        for alias in pass_vault:
            row = []
            row.append(alias)
            row.extend(pass_vault[alias])
            table.add_row(row)
    
    table.field_names = ["Alias", "Username", "Password"]
    table.align = "l"
    print (table)


# Manager function for the master password. Asks the user for the master
# password if there is already a password vault. If not, it creates a new
# password vault associated to a new master password. Can also reset the
# master password after 3 failed attempts.
# returns:
#    crypt_key: The master password.
#    lines: A list of lines containing the aliases and passwords decrypted
#           from the password vault with the master password.
def manage_master_password():

    if not (os.path.isfile(pass_vault_file) \
        and os.path.getsize(pass_vault_file) > 0):

        crypt_key = ""
        while len(crypt_key) < min_length or len(crypt_key) > max_length:
        
            try:    
                crypt_key = getpass.getpass("[pswm] Create a master password (" +
                                            str(min_length) + "-" +
                                            str(max_length) +
                                            " chars): ")
            except KeyboardInterrupt:
                print("\n")
                return False, ""

        crypt_key_verify = ""
        while crypt_key_verify != crypt_key:

            try:
                crypt_key_verify = getpass.getpass("[pswm] Confirm your "
                                                   "master password: ")
            except KeyboardInterrupt:
                print("\n")
                return False, ""

        print ("Password vault ~/.pswm created.")
        lines = []
        lines.append("pswm\t" + getpass.getuser() + "\t" + crypt_key)
        return crypt_key, lines

    for i in range(3):

        try:
            crypt_key = getpass.getpass("[pswm] Master password: ")
        except KeyboardInterrupt:
            print("\n")
            return False, ""

        lines = encrypted_file_to_lines(pass_vault_file, crypt_key)

        if not lines:
            print("Sorry, try again.")
        else:
            return crypt_key, lines

        if i == 2:
            print("\nYou have failed to enter the correct "
                  "master password 3 times.")
            return reset_master_password()


# Function to reset the master password.
# returns:
#   manage_master_password(): The result of manage_master_password() containing
#                            the new master password or False, "" if the user
#                            does not want to reset the master password.
def reset_master_password():
    print("Resetting your master password will delete your password vault.")
    
    try:
        text = input("[pswm] Do you want to reset your master password? (y/n): ")
    except KeyboardInterrupt:
        print("\nPassword reset aborted.")
        return False, ""

    if text == "y":
        if os.path.isfile(pass_vault_file):
            os.remove(pass_vault_file)
            print ("Password vault ~/.pswm deleted.\n")
        return manage_master_password()
    else:
        print("Password reset aborted.")
        return False, ""


# Splits each line of a list of lines into two parts. Then inserts the second
# part into the dictionary indexed by the first part.
# args:
#   lines: A list of lines.
# returns:
#   pass_vault: A dictionary containing the alias and password.
def lines_to_pass_vault(lines):

    pass_vault = {}
    for line in lines:
        line = line.rstrip()
        try:
            alias, username, password = line.split('\t')
            pass_vault[alias] = [username, password]
        except ValueError:
            pass

    return pass_vault


# For each key in the dictionary, it inserts a string into a list containing
# the key and the values separated by a tab.
# args:
#   pass_vault: A dictionary aliases associated to usernames and passwords.
# returns:
#   lines: A list of lines each formatted as key\tvalue[0]\tvalue[1].
def pass_vault_to_lines(pass_vault):

    lines = []
    for alias in pass_vault:
        lines.append(alias + '\t' + 
                     pass_vault[alias][0] + '\t' + 
                     pass_vault[alias][1])

    return lines


# This function opens and decrypts the password vault.
# args:
#   file_name: The name of the file containing the password vault.
#   master_password: The master password to use to decrypt the password vault.
# returns:
#   decrypted_lines: A list of lines containing the decrypted passwords.
def encrypted_file_to_lines(file_name, master_password):

    if not os.path.isfile(file_name):
        return ""

    with open(file_name, 'r') as f:
        encrypted_text = f.read()

    decrypted_text = cryptocode.decrypt(encrypted_text, master_password)

    if decrypted_text is False:
        return False

    decrypted_lines = decrypted_text.splitlines()
    return decrypted_lines


# This function encrypts and stores the password vault.
# args:
#    lines: A list of lines containing the aliases and passwords.
#    file_name: The name of the file to store the password vault.
#    master_password: The master password to use to encrypt the password vault.
def lines_to_encrypted_file(lines, file_name, master_password):

    decrypted_text = '\n'.join(lines)
    encrypted_text = cryptocode.encrypt(decrypted_text, master_password)

    with open(file_name, 'w') as f:
        f.write(encrypted_text)


# This function generates a password of legth passed as argument.
# args:
#   length: The length of the random password to be generated.
# returns:
#   password: A string containing the random password.
def generate_password(length):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for i in range(int(length)))
    return password


# Enum for the different actions that can be performed by the password manager
class Command(Enum):
    ADD_KEY = 1
    GEN_DEF = 2
    GEN_LEN = 3
    DEL_KEY = 4
    GET_KEY = 5
    LST_KEY = 6
    DEFAULT = 7


# This function parses the command line arguments and returns a Command enum
# containing the action to be performed.
# returns:
#   command: The action to be performed
def parse_command():
    command = Command.DEFAULT

    for i in range(len(sys.argv)):
        if sys.argv[i].startswith("-") \
                and sys.argv[i] not in ["-a", "-d", "-g"]:
            print("Unknown option: " + sys.argv[i])
            return Command.DEFAULT
        if i == 1:
            if sys.argv[i] == "-a":
                command = Command.LST_KEY
            else:
                command = Command.GET_KEY
        elif i == 2:
            if sys.argv[i] == "-d":
                command = Command.DEL_KEY
        elif i == 3:
            if sys.argv[i] == "-g":
                command = Command.GEN_DEF
            else:
                command = Command.ADD_KEY    
        elif i == 4:
            if sys.argv[i-1] == "-g":
                command = Command.GEN_LEN
        elif i > 4:    
            print("Too many arguments.")
            return Command.DEFAULT
    return command


# Definition of the main function
def main():

    crypt_key, lines = manage_master_password()
    if not crypt_key:
        return

    pass_vault = lines_to_pass_vault(lines)
    command = parse_command()

    if command == Command.ADD_KEY:  # pswm <alias> <password>

        if sys.argv[1] == "pswm":
            print("You cannot change or delete the master password.")
        else:
            pass_vault[sys.argv[1]] = [sys.argv[2], sys.argv[3]]
            print("Added username and password for " + sys.argv[1] + ".")

    elif command == Command.GEN_DEF:  # pswm <alias> -g

        if sys.argv[1] == "pswm":
            print("You cannot change or delete the master password.")
        else:
            password = generate_password(default_length)
            pass_vault[sys.argv[1]] = [sys.argv[2], password]
            print_pass_vault(pass_vault, sys.argv[1])

    elif command == Command.GEN_LEN:  # pswm <alias> -g [length]

        if sys.argv[1] == "pswm":
            print("You cannot change or delete the master password.")
        else:
            password = generate_password(sys.argv[4])
            pass_vault[sys.argv[1]] = [sys.argv[2], password]
            print_pass_vault(pass_vault, sys.argv[1])

    elif command == Command.DEL_KEY:  # pswm <alias> -d

        if sys.argv[1] == "pswm":
            print("You cannot change or delete the master password.")
        else:
            del pass_vault[sys.argv[1]]
            print("Deleted username and password for " + sys.argv[1] + ".")

    elif command == Command.GET_KEY:  # pswm <alias>

        print_pass_vault(pass_vault, sys.argv[1])

    elif command == Command.LST_KEY:  # pswm -a

        if len(pass_vault) == 0:
            print("The password vault is empty.")
        else:
            print_pass_vault(pass_vault)

    else:                            # pswm
        print(help_msg)

    lines = pass_vault_to_lines(pass_vault)
    lines_to_encrypted_file(lines, pass_vault_file, crypt_key)


# Call the main function
if __name__ == "__main__":
    main()
