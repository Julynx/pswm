#!/usr/bin/env python3
import sys
import os
import cryptocode
import random
import string
import getpass
from enum import Enum
from prettytable import PrettyTable, SINGLE_BORDER

help_msg = '''
  pswm <alias> <username> <password>  - Store a username and a password.
  pswm <alias> <username> -g [length] - Store a random password for a username.
  pswm <alias> -d                     - Delete user and password for an alias.
  pswm <alias>                        - Print user and password for an alias.
  pswm -a                             - Print all stored users and passwords.
'''
min_length = 4
default_length = 16
max_length = 32
pass_vault_file = os.path.expanduser("~") + "/.pswm"


def print_pass_vault(pass_vault, alias=None):
    """
    Function to print the password vault using prettyTable.

    Args:
        pass_vault (dict): A dictionary of aliases associated to usernames
        and passwords.
        alias (str, optional): The alias to print.
        If None, all aliases are printed. Defaults to None.
    """
    if len(pass_vault) == 0:
        print("The password vault is empty.")
        return

    table = PrettyTable()
    if alias is not None:
        if alias in pass_vault:
            row = []
            row.append(alias)
            row.extend(pass_vault[alias])
            table.add_row(row)
        else:
            print("No password for " + alias + " was found.")
            return
    else:
        for alias in pass_vault:
            row = []
            row.append(alias)
            row.extend(pass_vault[alias])
            table.add_row(row)

    table.field_names = ["Alias", "Username", "Password"]
    table.align = "l"
    table.set_style(SINGLE_BORDER)
    print(table)


def register():
    """
    This function asks the user for a master password for the creation of a
    password vault.

    Returns:
        str, list: The master password and a list of lines containing the
        aliases, users and passwords for the password vault.
    """
    crypt_key = ""
    while len(crypt_key) < min_length or len(crypt_key) > max_length:
        try:
            crypt_key = getpass.getpass("[pswm] Create a master password (" +
                                        str(min_length) + "-" +
                                        str(max_length) +
                                        " chars): ")
        except KeyboardInterrupt:
            print("\n")
            return False, ""

    crypt_key_verify = ""
    while crypt_key_verify != crypt_key:
        try:
            crypt_key_verify = getpass.getpass("[pswm] Confirm your "
                                               "master password: ")
        except KeyboardInterrupt:
            print("\n")
            return False, ""

    print("Password vault ~/.pswm created.")
    lines = []
    lines.append("pswm\t" + getpass.getuser() + "\t" + crypt_key)
    return crypt_key, lines


def login():
    """
    This function decrypts and reads the password vault.

    Returns:
        str, list: The master password and a list of lines containing the
        aliases and passwords decrypted from the password vault.
    """
    for i in range(3):
        try:
            crypt_key = getpass.getpass("[pswm] Master password: ")
        except KeyboardInterrupt:
            print("\n")
            return False, ""

        lines = encrypted_file_to_lines(pass_vault_file, crypt_key)
        if not lines:
            print("Sorry, try again.")
        else:
            return crypt_key, lines

        if i == 2:
            print("\nYou have failed to enter the correct "
                  "master password 3 times.")
            return reset_master_password()


def manage_master_password():
    """
    Manager function for the master password. Asks the user for the master
    password if there is already a password vault. If not, it creates a new
    password vault associated to a new master password. Can also reset the
    master password after 3 failed attempts.

    Returns:
        str, list: The master password and a list of lines containing the
        aliases and passwords decrypted from the password vault.
    """
    if not (os.path.isfile(pass_vault_file)
            and os.path.getsize(pass_vault_file) > 0):
        return register()
    else:
        return login()


def reset_master_password():
    """
    Function to reset the master password.

    Returns:
        str, list: The master password and a list of lines containing the
        aliases and passwords decrypted from the password vault.
    """
    print("Resetting your master password will delete your password vault.")
    try:
        text = input(
            "[pswm] Do you want to reset your master password? (y/n): ")
    except KeyboardInterrupt:
        print("\nPassword reset aborted.")
        return False, ""

    if text == "y":
        if os.path.isfile(pass_vault_file):
            os.remove(pass_vault_file)
            print("Password vault ~/.pswm deleted.\n")
        return manage_master_password()
    else:
        print("Password reset aborted.")
        return False, ""


def lines_to_pass_vault(lines):
    """
    Splits each line of a list of lines into two parts. Then inserts the second
    part into the dictionary indexed by the first part.

    Args:
        lines(list): A list of lines.

    Returns:
        dict: A dictionary containing the aliases, usernames and passwords.
    """
    pass_vault = {}
    for line in lines:
        line = line.rstrip()
        try:
            alias, username, password = line.split('\t')
            pass_vault[alias] = [username, password]
        except ValueError:
            pass

    return pass_vault


def pass_vault_to_lines(pass_vault):
    """
    For each key in the dictionary, it inserts a string into a list containing
    the key and the values separated by a tab.

    Args:
        pass_vault(dict): A dictionary aliases associated to usernames
        and passwords.

    Returns:
        list: A list of lines each formatted as key\tvalue[0]\tvalue[1].
    """
    lines = []
    for alias in pass_vault:
        lines.append(alias + '\t' +
                     pass_vault[alias][0] + '\t' +
                     pass_vault[alias][1])

    return lines


def encrypted_file_to_lines(file_name, master_password):
    """
    This function opens and decrypts the password vault.

    Args:
        file_name (str): The name of the file containing the password vault.
        master_password (str): The master password to use to decrypt the
        password vault.

    Returns:
        list: A list of lines containing the decrypted passwords.
    """
    if not os.path.isfile(file_name):
        return ""

    with open(file_name, 'r') as f:
        encrypted_text = f.read()

    decrypted_text = cryptocode.decrypt(encrypted_text, master_password)
    if decrypted_text is False:
        return False

    decrypted_lines = decrypted_text.splitlines()
    return decrypted_lines


def lines_to_encrypted_file(lines, file_name, master_password):
    """
    This function encrypts and stores the password vault.

    Args:
        lines (list): A list of lines containing the aliases and passwords.
        file_name (str): The name of the file to store the password vault.
        master_password (str): The master password to use to encrypt the
        password vault.
    """
    decrypted_text = '\n'.join(lines)
    encrypted_text = cryptocode.encrypt(decrypted_text, master_password)

    with open(file_name, 'w') as f:
        f.write(encrypted_text)


def generate_password(length):
    """
    This function generates a random password of length passed as argument.

    Args:
        length (int): The length of the random password to be generated.

    Returns:
        str: A string containing the random password.
    """
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for i in range(int(length)))
    return password


class Command(Enum):
    ADD_KEY = 1  # (Modifies)   Add a new alias and password.
    GEN_DEF = 2  # (Modifies)   Generate a new password.
    GEN_LEN = 3  # (Modifies)   Generate a new password of a given length.
    DEL_KEY = 4  # (Modifies)   Delete an alias.
    GET_KEY = 5  # (Reads)      Get the password associated to an alias.
    LST_KEY = 6  # (Reads)      List all aliases.
    DEFAULT = 7  # (Reads)      Print the program's default help message.


def parse_command():
    """
    This function parses the command line arguments and returns a Command enum
    containing the action to be performed.

    Returns:
        Command: The action to be performed.
    """
    command = Command.DEFAULT
    for i in range(len(sys.argv)):
        if sys.argv[i].startswith("-") \
                and sys.argv[i] not in ["-a", "-d", "-g"]:
            print("Unknown option: " + sys.argv[i])
            return Command.DEFAULT
        if i == 1:
            command = Command.GET_KEY
            if sys.argv[i] == "-a":
                command = Command.LST_KEY
        elif i == 2:
            command = Command.DEFAULT
            if sys.argv[i] == "-d":
                command = Command.DEL_KEY
        elif i == 3:
            command = Command.ADD_KEY
            if sys.argv[i] == "-g":
                command = Command.GEN_DEF
        elif i == 4:
            command = Command.DEFAULT
            if sys.argv[i-1] == "-g":
                command = Command.GEN_LEN
        elif i > 4:
            print("Too many arguments.")
            return Command.DEFAULT
    return command


def main():
    crypt_key, lines = manage_master_password()
    if not crypt_key:
        return

    pass_vault = lines_to_pass_vault(lines)
    command = parse_command()

    # Warn if the user tries to modify the master password.
    if command.value <= 4 and sys.argv[1] == "pswm":
        print("You cannot change or delete the master password.")

    elif command == Command.ADD_KEY:  # pswm <alias> <username> <password>
        pass_vault[sys.argv[1]] = [sys.argv[2], sys.argv[3]]
        print("Added username and password for " + sys.argv[1] + ".")

    elif command == Command.GEN_DEF or command == Command.GEN_LEN:
        length = default_length       # pswm <alias> <username> -g
        if command == Command.GEN_LEN:
            length = sys.argv[4]      # pswm <alias> <username> -g [length]

        pass_vault[sys.argv[1]] = [sys.argv[2], generate_password(length)]
        print_pass_vault(pass_vault, sys.argv[1])

    elif command == Command.DEL_KEY:  # pswm <alias> -d
        del pass_vault[sys.argv[1]]
        print("Deleted username and password for " + sys.argv[1] + ".")

    elif command == Command.GET_KEY:  # pswm <alias>
        print_pass_vault(pass_vault, sys.argv[1])

    elif command == Command.LST_KEY:  # pswm -a
        print_pass_vault(pass_vault)

    else:                             # pswm
        print(help_msg)

    lines = pass_vault_to_lines(pass_vault)
    lines_to_encrypted_file(lines, pass_vault_file, crypt_key)


if __name__ == "__main__":
    main()
